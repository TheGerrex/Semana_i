{"moduleFile":{"sourceFilePath":"/Users/gerardogarcia/code/TheGerrex/Semana_i_linked_data/src/components/my-component/my-component.tsx","jsFilePath":"/Users/gerardogarcia/code/TheGerrex/Semana_i_linked_data/src/components/my-component/my-component.js","cmps":[{"isLegacy":false,"tagName":"my-component","excludeFromCollection":false,"isCollectionDependency":false,"componentClassName":"MyComponent","elementRef":"el","encapsulation":"none","properties":[{"name":"data","type":"any","attribute":"data","reflect":false,"mutable":false,"required":false,"optional":false,"defaultValue":"{ items: []}","complexType":{"original":"any","resolved":"any","references":{}},"docs":{"tags":[],"text":"The first name"},"internal":false},{"name":"myTitle","type":"string","attribute":"my-title","reflect":false,"mutable":false,"required":false,"optional":false,"defaultValue":"\"\"","complexType":{"original":"string","resolved":"string","references":{}},"docs":{"tags":[],"text":""},"internal":false}],"virtualProperties":[],"states":[{"name":"isLoading"}],"methods":[{"name":"printConsoleLog","docs":{"text":"","tags":[]},"complexType":{"signature":"() => Promise<void>","parameters":[],"references":{"Promise":{"location":"global"}},"return":"Promise<void>"},"internal":false}],"listeners":[],"events":[],"watchers":[],"styles":[{"modeName":"$","styleId":"MY-COMPONENT","styleStr":null,"styleIdentifier":null,"compiledStyleText":null,"compiledStyleTextScoped":null,"compiledStyleTextScopedCommented":null,"externalStyles":[{"absolutePath":"/Users/gerardogarcia/code/TheGerrex/Semana_i_linked_data/src/components/my-component/my-component.css","relativePath":"my-component.css","originalComponentPath":"my-component.css"}]}],"legacyConnect":[],"legacyContext":[],"internal":false,"assetsDirs":[],"styleDocs":[],"docs":{"tags":[],"text":""},"jsFilePath":"/Users/gerardogarcia/code/TheGerrex/Semana_i_linked_data/src/components/my-component/my-component.js","sourceFilePath":"/Users/gerardogarcia/code/TheGerrex/Semana_i_linked_data/src/components/my-component/my-component.tsx","hasAttributeChangedCallbackFn":false,"hasComponentWillLoadFn":false,"hasComponentDidLoadFn":true,"hasComponentShouldUpdateFn":false,"hasComponentWillUpdateFn":false,"hasComponentDidUpdateFn":false,"hasComponentWillRenderFn":false,"hasComponentDidRenderFn":false,"hasComponentDidUnloadFn":false,"hasConnectedCallbackFn":false,"hasDisconnectedCallbackFn":false,"hasElement":false,"hasEvent":false,"hasLifecycle":true,"hasListener":false,"hasListenerTarget":false,"hasListenerTargetWindow":false,"hasListenerTargetDocument":false,"hasListenerTargetBody":false,"hasListenerTargetParent":false,"hasMember":true,"hasMethod":true,"hasMode":false,"hasAttribute":true,"hasProp":true,"hasPropNumber":false,"hasPropBoolean":false,"hasPropString":true,"hasPropMutable":false,"hasReflect":false,"hasRenderFn":true,"hasState":true,"hasStyle":true,"hasVdomAttribute":true,"hasVdomXlink":false,"hasVdomClass":false,"hasVdomFunctional":true,"hasVdomKey":false,"hasVdomListener":false,"hasVdomRef":false,"hasVdomRender":true,"hasVdomStyle":false,"hasVdomText":true,"hasWatchCallback":false,"isPlain":false,"htmlAttrNames":["id","width","height"],"htmlTagNames":["script","div","canvas","p","data-cloud"],"isUpdateable":true,"potentialCmpRefs":["data-cloud"]}],"coreRuntimeApis":[],"collectionName":null,"dtsFilePath":null,"excludeFromCollection":false,"externalImports":["@stencil/core","stencil-fragment"],"hasVdomAttribute":false,"hasVdomXlink":false,"hasVdomClass":false,"hasVdomFunctional":false,"hasVdomKey":false,"hasVdomListener":false,"hasVdomRef":false,"hasVdomRender":false,"hasVdomStyle":false,"hasVdomText":false,"htmlAttrNames":[],"htmlTagNames":[],"isCollectionDependency":false,"isLegacy":false,"localImports":[],"originalCollectionComponentPath":null,"originalImports":["@stencil/core","stencil-fragment"],"potentialCmpRefs":[]},"jsText":"import { h } from \"@stencil/core\";\r\nimport Fragment from 'stencil-fragment';\r\nexport class MyComponent {\r\n    constructor() {\r\n        /**\r\n         * The first name\r\n         */\r\n        this.data = { items: [] };\r\n        this.myTitle = \"\";\r\n        this.isLoading = true;\r\n    }\r\n    async printConsoleLog() {\r\n        console.log(\"method\");\r\n    }\r\n    componentDidLoad() {\r\n        const tagCanvasScript = document.createElement(\"script\");\r\n        tagCanvasScript.onload = () => { this.isLoading = false; };\r\n        tagCanvasScript.src = \"http://www.goat1000.com/tagcanvas.min.js?2.9\";\r\n        this.el.appendChild(tagCanvasScript);\r\n        console.log(\"Done\");\r\n    }\r\n    render() {\r\n        if (!this.isLoading) {\r\n            try {\r\n                window['TagCanvas'].Start('myCanvas', 'tags', {\r\n                    textFont: 'Roboto',\r\n                    textColour: '#ff970c',\r\n                    outlineColour: '#08454a',\r\n                    reverse: true,\r\n                    depth: 2,\r\n                    interval: 20,\r\n                    minBrightness: 0.1,\r\n                    pulsateTo: 0.2,\r\n                    pulsateTime: 0.75,\r\n                    initial: [0.1, -0.1],\r\n                    decel: 0.98,\r\n                    hideTags: false,\r\n                    shadow: '#ccf',\r\n                    shadowBlur: 3,\r\n                    weight: true,\r\n                    weightFrom: 'data-weight',\r\n                    fadeIn: 800,\r\n                    maxSpeed: 0.05\r\n                });\r\n            }\r\n            catch (e) {\r\n                // something went wrong, hide the canvas container\r\n                document.getElementById('myCanvasContainer').style.display = 'none';\r\n            }\r\n        }\r\n        ;\r\n        return (h(Fragment, null,\r\n            h(\"div\", { id: \"myCanvasContainer\" },\r\n                h(\"canvas\", { width: \"1000\", height: \"300\", id: \"myCanvas\" },\r\n                    h(\"p\", null, \"Anything in here will be replaced on browsers that support the canvas element\"))),\r\n            h(\"data-cloud\", null)));\r\n    }\r\n    static get is() { return \"my-component\"; }\r\n    static get originalStyleUrls() { return {\r\n        \"$\": [\"my-component.css\"]\r\n    }; }\r\n    static get styleUrls() { return {\r\n        \"$\": [\"my-component.css\"]\r\n    }; }\r\n    static get properties() { return {\r\n        \"data\": {\r\n            \"type\": \"any\",\r\n            \"mutable\": false,\r\n            \"complexType\": {\r\n                \"original\": \"any\",\r\n                \"resolved\": \"any\",\r\n                \"references\": {}\r\n            },\r\n            \"required\": false,\r\n            \"optional\": false,\r\n            \"docs\": {\r\n                \"tags\": [],\r\n                \"text\": \"The first name\"\r\n            },\r\n            \"attribute\": \"data\",\r\n            \"reflect\": false,\r\n            \"defaultValue\": \"{ items: []}\"\r\n        },\r\n        \"myTitle\": {\r\n            \"type\": \"string\",\r\n            \"mutable\": false,\r\n            \"complexType\": {\r\n                \"original\": \"string\",\r\n                \"resolved\": \"string\",\r\n                \"references\": {}\r\n            },\r\n            \"required\": false,\r\n            \"optional\": false,\r\n            \"docs\": {\r\n                \"tags\": [],\r\n                \"text\": \"\"\r\n            },\r\n            \"attribute\": \"my-title\",\r\n            \"reflect\": false,\r\n            \"defaultValue\": \"\\\"\\\"\"\r\n        }\r\n    }; }\r\n    static get states() { return {\r\n        \"isLoading\": {}\r\n    }; }\r\n    static get methods() { return {\r\n        \"printConsoleLog\": {\r\n            \"complexType\": {\r\n                \"signature\": \"() => Promise<void>\",\r\n                \"parameters\": [],\r\n                \"references\": {\r\n                    \"Promise\": {\r\n                        \"location\": \"global\"\r\n                    }\r\n                },\r\n                \"return\": \"Promise<void>\"\r\n            },\r\n            \"docs\": {\r\n                \"text\": \"\",\r\n                \"tags\": []\r\n            }\r\n        }\r\n    }; }\r\n    static get elementRef() { return \"el\"; }\r\n}\r\n"}